{"version":3,"file":"static/js/139.454ae542.chunk.js","mappings":"wSAgBIA,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,KAAMF,EAAAA,KAAaG,IAAI,GAAGC,IAAI,IAC9BC,MAAOL,EAAAA,KAAaK,QACpBC,SAAUN,EAAAA,KAAaG,IAAI,KAGtB,SAASI,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAgB,mCAAG,WAAOC,EAAP,mFAAiBC,EAAjB,EAAiBA,UAAjB,SACCJ,GAASK,EAAAA,EAAAA,IAASF,IADnB,qBACfG,MADe,uBAGrBF,IACAG,IAAAA,OAAAA,QAAwB,qBAJH,0BAOvBA,IAAAA,OAAAA,QAAA,gDAPuB,4CAAH,wDAUtB,OACE,SAAC,KAAD,CAAMC,GAAG,WAAWC,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAtD,UACE,SAAC,KAAD,CAAKH,GAAG,QAAQI,EAAG,EAAGC,QAAQ,KAA9B,UACE,SAAC,KAAD,CACEC,cAAe,CACbpB,KAAM,GACNG,MAAO,GACPC,SAAU,IAEZiB,iBAAkBxB,EAClByB,SAAUd,EAPZ,SASG,gBAAGe,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMH,SAAUC,EAAhB,UACE,UAAC,KAAD,CAAQG,QAAS,EAAGX,MAAM,aAA1B,WACE,UAAC,KAAD,CACEY,YAAU,EACVC,YAAaJ,EAAOxB,MAAQyB,EAAQzB,KAFtC,WAIE,SAAC,KAAD,CAAW6B,QAAQ,OAAnB,mBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,OACHhC,KAAK,OACLiC,KAAK,OACLC,QAAQ,SACRC,YAAY,gBAEd,SAAC,KAAD,UAAmBX,EAAOxB,WAE5B,UAAC,KAAD,CACE2B,YAAU,EACVC,YAAaJ,EAAOrB,OAASsB,EAAQtB,MAFvC,WAIE,SAAC,KAAD,CAAW0B,QAAQ,QAAnB,oBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,QACHhC,KAAK,QACLiC,KAAK,QACLC,QAAQ,SACRC,YAAY,iBAEd,SAAC,KAAD,UAAmBX,EAAOrB,YAE5B,UAAC,KAAD,CACEwB,YAAU,EACVC,YAAaJ,EAAOpB,UAAYqB,EAAQrB,SAF1C,WAIE,SAAC,KAAD,CAAWyB,QAAQ,WAAnB,uBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,WACHhC,KAAK,WACLiC,KAAK,WACLE,YAAY,iBACZD,QAAQ,YAEV,SAAC,KAAD,UAAmBV,EAAOpB,eAG5B,SAAC,KAAD,CAAQ6B,KAAK,SAASG,YAAY,SAASC,MAAM,OAAjD,wBAjDL,OA2DV,CCvGc,SAASC,IACtB,OACE,iCACE,SAACC,EAAA,EAAD,WACE,+CAEF,SAAClC,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.js","pages/Register.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Field, Formik } from 'formik';\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nlet schema = yup.object().shape({\n  name: yup.string().min(3).max(20),\n  email: yup.string().email(),\n  password: yup.string().min(7),\n});\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n\n  const handleFormSubmit = async (values, { resetForm }) => {\n    const { error } = await dispatch(register(values));\n    if (!error) {\n      resetForm();\n      Notiflix.Notify.success('You are registred');\n      return;\n    }\n    Notiflix.Notify.failure(`Something went wrong, please check your data`);\n  };\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={6} rounded=\"md\">\n        <Formik\n          initialValues={{\n            name: '',\n            email: '',\n            password: '',\n          }}\n          validationSchema={schema}\n          onSubmit={handleFormSubmit}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl\n                  isRequired\n                  isInvalid={!!errors.name && touched.name}\n                >\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"name\"\n                    variant=\"filled\"\n                    placeholder=\"Enter name\"\n                  />\n                  <FormErrorMessage>{errors.name}</FormErrorMessage>\n                </FormControl>\n                <FormControl\n                  isRequired\n                  isInvalid={!!errors.email && touched.email}\n                >\n                  <FormLabel htmlFor=\"email\">Email</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                    placeholder=\"Enter email\"\n                  />\n                  <FormErrorMessage>{errors.email}</FormErrorMessage>\n                </FormControl>\n                <FormControl\n                  isRequired\n                  isInvalid={!!errors.password && touched.password}\n                >\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter password\"\n                    variant=\"filled\"\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Log In\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n}\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from '../components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </>\n  );\n}\n"],"names":["schema","yup","shape","name","min","max","email","password","RegisterForm","dispatch","useDispatch","handleFormSubmit","values","resetForm","register","error","Notiflix","bg","align","justify","h","p","rounded","initialValues","validationSchema","onSubmit","handleSubmit","errors","touched","spacing","isRequired","isInvalid","htmlFor","as","Input","id","type","variant","placeholder","colorScheme","width","Register","Helmet"],"sourceRoot":""}